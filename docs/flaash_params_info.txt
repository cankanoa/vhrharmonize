[OrderedDict([('ALLOW_NULL', False),
              ('URI_PARAM', None),
              ('name', 'INPUT_RASTER'),
              ('description',
               'Specify a raster on which to perform the atmospheric '
               'correction.'),
              ('display_name', 'Input Raster'),
              ('required', True),
              ('type', 'ENVIRASTER'),
              ('direction', 'input')]),
 OrderedDict([('name', 'SENSOR_TYPE'),
              ('description', 'Name of the sensor.'),
              ('display_name', 'Sensor Type'),
              ('required', False),
              ('type', 'STRING'),
              ('direction', 'input'),
              ('default_value', 'Unknown'),
              ('choice_list',
               ['AVIRIS',
                'HYDICE',
                'HyMap',
                'Hyperion',
                'NVIS',
                'Compass',
                'Hycas',
                'Mars',
                'Multispectral',
                'Unknown']),
              ('fold_case', True)]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'INPUT_SCALE'),
              ('description',
               'Specifies the band normalization factors that convert the '
               'pixel values in the input raster into uW/cm2/nm/sr.'),
              ('display_name', 'Input Scale'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('dimensions', '[*]'),
              ('direction', 'input')]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'OUTPUT_SCALE'),
              ('description',
               'Multiplier to rescale reflectance values [0,1] to integer '
               'values in the output. Output reflectances are always written '
               'as short integers.'),
              ('display_name', 'Output Reflectance Scale Factor'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input')]),
 OrderedDict([('name', 'CALIBRATION_FILE'),
              ('description',
               'Specify a full path and filename for sensor wavelength '
               'calibration data. This file should contain the channel centers '
               'and widths (FWHM), and optionally may define bd bands (BBL).'),
              ('display_name', 'Calibration File'),
              ('required', False),
              ('type', 'ENVIURI'),
              ('direction', 'input'),
              ('fold_case', False),
              ('auto_extension', None),
              ('is_temporary', False),
              ('is_directory', False)]),
 OrderedDict([('name', 'CALIBRATION_FORMAT'),
              ('description',
               'Sensor calibration file format. ASCII-two column text file '
               'which specifies channel center and width values. ENVI-ENVI '
               'style cube header with wavelength, fwhm, and bbl arrays. '
               'DISCRETE-text file defining channel shapes as paired '
               'wavelength and response values. FILTER-discrete channel shape '
               'data defined within the FLAASH input configuration. '
               'FLAASH-sensor calibration data defined within the FLAASH input '
               'configuration.'),
              ('display_name', 'Calibration File Format'),
              ('required', False),
              ('type', 'STRING'),
              ('direction', 'input'),
              ('default_value', 'flaash'),
              ('choice_list',
               ['ASCII', 'ENVI', 'Discrete', 'Filter', 'FLAASH']),
              ('fold_case', True)]),
 OrderedDict([('name', 'CALIBRATION_UNITS'),
              ('description',
               'Specify the wavelength units of the calibration data.'),
              ('display_name', 'Calibration Units'),
              ('required', False),
              ('type', 'STRING'),
              ('direction', 'input'),
              ('choice_list', ['Nanometers', 'Microns']),
              ('fold_case', True)]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'LAT_LONG'),
              ('description',
               'Latitude and Longitude of the scene center in decimal '
               'degrees.'),
              ('display_name', 'Scene Center'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('dimensions', '[2]'),
              ('direction', 'input')]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'SENSOR_ALTITUDE'),
              ('description', 'Sensor altitude in kilometers.'),
              ('display_name', 'Sensor Altitude'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input')]),
 OrderedDict([('ALLOW_NULL', False),
              ('name', 'DATE_TIME'),
              ('description',
               'Collection date and time of the image [YYYY,MM,DD,H,M,S]. Time '
               'given in GMT.'),
              ('display_name', 'Acquisition Date/Time'),
              ('required', False),
              ('type', 'ENVITIME'),
              ('direction', 'input')]),
 OrderedDict([('name', 'USE_ADJACENCY'),
              ('description',
               'Enable/disable compensation for adjacency effects.'),
              ('display_name', 'Adjacency Correction'),
              ('required', False),
              ('type', 'STRING'),
              ('direction', 'input'),
              ('default_value', 'Wavelength-dependent scattering kernel'),
              ('choice_list',
               ['Disabled',
                'Legacy exponential scattering kernel',
                'Wavelength-dependent scattering kernel']),
              ('fold_case', True)]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'DEFAULT_VISIBILITY'),
              ('description',
               'Set a default visibility in kilometers for the scene. If the '
               'aerosol retrieval is disabled, the default visibility is used; '
               'otherwise, the default visibility is used only for the first '
               'water retrieval.'),
              ('display_name', 'Initial Visibility'),
              ('required', False),
              ('min', 0.1),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input'),
              ('default_value', 40.0)]),
 OrderedDict([('name', 'USE_POLISHING'),
              ('description',
               'Enable/disable spectral polishing. Polishing is incompatible '
               'with MSI sensors.'),
              ('display_name', 'Spectral Polishing'),
              ('required', False),
              ('type', 'STRING'),
              ('direction', 'input'),
              ('default_value', 'Disabled'),
              ('choice_list',
               ['Disabled',
                'Polish using reference materials',
                'Polish using statistical detection of spectral artifacts']),
              ('fold_case', True)]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_EXACT', False),
              ('TEST_OVERFLOW', True),
              ('name', 'POLISHING_RESOLUTION'),
              ('description',
               'Width of the smoothing filter (in bands) used for the spectral '
               'polishing. An odd number is recommended for performance '
               'reasons. A number equivalent to the spectral width between 50 '
               'and 200 nm is also recommended.'),
              ('display_name', 'Polishing Width'),
              ('required', False),
              ('min', 3),
              ('max', None),
              ('type', 'UINT'),
              ('direction', 'input')]),
 OrderedDict([('ALLOW_CAST', True),
              ('ALLOW_STRING', True),
              ('name', 'SENSOR_AUTOCALIBRATION'),
              ('description',
               'Enable/disable sensor auto-calibration (NODD) algorithm. This '
               'will also activate the automated smile correction for '
               'appropriate sensors. This calibration is not compatible with '
               'MSI sensor types.'),
              ('display_name', 'Sensor Autocalibration'),
              ('required', False),
              ('type', 'BOOLEAN'),
              ('direction', 'input'),
              ('default_value', True)]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'SENSOR_CAL_PRECISION'),
              ('description',
               'Sets a minimum accuray threshold for the sensor '
               'autocalibration. This parameter determines whether or not a '
               'spectral absorption feature will contribute to the calibration '
               'adjustment, based on the variance of the estimated wavelength '
               'shift local to that feature. default 15 nm.'),
              ('display_name', 'Autocalibration Precision'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input'),
              ('default_value', 0.15000001)]),
 OrderedDict([('name', 'SENSOR_CAL_FEATURE_LIST'),
              ('description',
               'Specify a set of spectral features used to adjust sensor '
               'calibration when Sensor Autocalibration is active. All '
               'features are selected by default. In the following list of '
               'features, the first three are the most reliable based on past '
               'performance. O2_763, H2O_940, CO2_2040, Solar_H_434, '
               'Solar_H_486, Solar_Mg_517, Solar_H_656, O2_691, H2O_820, '
               'H2O_1130, O2_1266, CO2_1614.'),
              ('display_name', 'Sensor Calibration Features'),
              ('required', False),
              ('type', 'STRING'),
              ('direction', 'input'),
              ('fold_case', False)]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'GROUND_ELEVATION'),
              ('description', 'Average ground elevation in kilometers.'),
              ('display_name', 'Ground Elevation'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input')]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'SOLAR_AZIMUTH'),
              ('description',
               'The relative solar angle as measured from the ground at the '
               'imaged site. the azimuth angle is measured as degrees '
               'clockwise from north to the line of sight vector of the sun.'),
              ('display_name', 'Solar Azimuth'),
              ('required', False),
              ('min', None),
              ('max', 360.0),
              ('type', 'FLOAT'),
              ('direction', 'input')]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'SOLAR_ZENITH'),
              ('description',
               'The relative solar angle as measured from the ground at the '
               'imaged site. A zenith angle of 0 is directly overhead, 90 is '
               'on the horizon.'),
              ('display_name', 'Solar Zenith'),
              ('required', False),
              ('min', None),
              ('max', 180.0),
              ('type', 'FLOAT'),
              ('direction', 'input')]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'LOS_AZIMUTH'),
              ('description',
               'Specifies the line-of-sight azimuth angle for a non-nadir data '
               'acquisition. The azimuth angle is measured as degrees '
               'clockwise from North to the line-of-sight vector (90 degrees '
               'due east, -90 degrees due west).'),
              ('display_name', 'Line of Sight Azimuth'),
              ('required', False),
              ('min', 0.0),
              ('max', 360.0),
              ('type', 'FLOAT'),
              ('direction', 'input'),
              ('default_value', 0.0)]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'LOS_ZENITH'),
              ('description',
               'Specifies the line-of-sight zenith angle in degrees for a '
               'non-nadir data acquisition. For a nadir viewing instrument '
               'this angle is 180 degrees.'),
              ('display_name', 'Line of Sight Zenith'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input'),
              ('default_value', 180.0)]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', False),
              ('TEST_OVERFLOW', True),
              ('name', 'IFOV'),
              ('description',
               'Angle subtended by a single detector element in milliradians.'),
              ('display_name', 'Instantaneous Field of View'),
              ('required', False),
              ('min', 0.0),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input')]),
 OrderedDict([('name', 'MODTRAN_ATM'),
              ('description',
               'Controls selection of the MODTRAN atmospheric model. Tropical '
               'Atmosphere (15 degrees north latitude), Mid-Latitude Summer '
               '(45 degrees north latitude), Mid-Latitude Winter (45 degrees '
               'north latitude), Sub-Arctic Summer (60 degrees north '
               'latitude), Sub-Arctic Winter (60 degrees north latitude).'),
              ('display_name', 'Atmospheric Model'),
              ('required', False),
              ('type', 'STRING'),
              ('direction', 'input'),
              ('default_value', 'Tropical Atmosphere'),
              ('choice_list',
               ['Tropical Atmosphere',
                'Mid-Latitude Summer',
                'Mid-Latitude Winter',
                'Sub-Arctic Summer',
                'Sub-Arctic Winter',
                '1976 US Standard Atmosphere']),
              ('fold_case', True)]),
 OrderedDict([('name', 'MODTRAN_AER'),
              ('description',
               'Controls selection of the MODTRAN aerosol model. '
               'High-Visibility Rural (visibility = 23 Km), Low-Visibility '
               'Rural (visibility = 5 Km), Maritime (visibility = 23 Km), '
               'Urban (visibility = 5 Km), Tropospheric (visibility = 50 Km).'),
              ('display_name', 'Aerosol Model'),
              ('required', False),
              ('type', 'STRING'),
              ('direction', 'input'),
              ('default_value', 'High-Visibility Rural'),
              ('choice_list',
               ['No Aerosol',
                'High-Visibility Rural',
                'Low-Visibility Rural',
                'Maritime',
                'Urban',
                'Tropospheric']),
              ('fold_case', True)]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'MODTRAN_RES'),
              ('description',
               'Specifies the bandmodel resolution to use with the MODTRAN '
               'simulations.'),
              ('display_name', 'Modtran Resolution'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input'),
              ('default_value', 15.0),
              ('choice_list', [15.0, 5.0, 1.0, 0.1])]),
 OrderedDict([('name', 'MODTRAN_MSCAT'),
              ('description',
               'Selects a multiple scattering method to use in MODTRAN. ISAACS '
               '(fastest), Scaled ISAACS (fast, more accurate), DISORT (SLOW, '
               'most accurate).'),
              ('display_name', 'Modtran Multiscatter Model'),
              ('required', False),
              ('type', 'STRING'),
              ('direction', 'input'),
              ('default_value', 'Scaled ISAACS'),
              ('choice_list', ['ISAACS', 'DISORT', 'Scaled ISAACS']),
              ('fold_case', True)]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'CO2_MIXING'),
              ('description',
               'Sets a CO2 mixing ratio in ppmv. If omitted, a default value '
               'is estimated for the year of the acquisition based on '
               'historical trends.'),
              ('display_name', 'CO2 Mixing Ratio'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input')]),
 OrderedDict([('name', 'WATER_ABS_CHOICE'),
              ('description',
               'Water absorption feature to use with the water vapor '
               'retrieval.'),
              ('display_name', 'Water Absorption Wavelength'),
              ('required', False),
              ('type', 'STRING'),
              ('direction', 'input'),
              ('default_value', 'Automatic Selection'),
              ('choice_list', ['1130', '940', '820', 'Automatic Selection']),
              ('fold_case', True)]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'WATER_MULT'),
              ('description',
               'Specifies the minimum and maximum water column multiplier for '
               'selected MODTRAN atmosphere.'),
              ('display_name', 'Water Column Multiplier'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('dimensions', '[2]'),
              ('direction', 'input'),
              ('default_value', [0.0099999998, 1.0])]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'WATER_VAPOR_PRESET'),
              ('description',
               'Overrides the water retrieval with a constant scale factor. A '
               'positive value will disable the water vapor retrieval.'),
              ('display_name', 'Water Vapor Preset'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input'),
              ('default_value', 0.0)]),
 OrderedDict([('name', 'USE_AEROSOL'),
              ('description',
               'Switch to enable/select an aerosol retrieval algorithm to '
               'obtain a scene visibility.'),
              ('display_name', 'Use Aerosol'),
              ('required', False),
              ('type', 'STRING'),
              ('direction', 'input'),
              ('default_value', 'Automatic Selection'),
              ('choice_list',
               ['Disabled',
                'Automatic Selection',
                'Vegetation Based Retrieval',
                'Water Based Retrieval',
                'Wavelength Dependent Water Based Retrieval',
                'Linear Regression Retrieval']),
              ('fold_case', True)]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'AEROSOL_SCALE_HT'),
              ('description',
               'Adjust the scattering range for adjacency correction. '
               'Specifies the highest altitude in kilometers of the boundary '
               'aerosol layer.'),
              ('display_name', 'Aerosol Scale Height'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input'),
              ('default_value', 2.0)]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'AER_BAND_RATIO'),
              ('description',
               'Specify a target ratio of reflectance values between two bands '
               'for the custom 2 band aerosol retrieval.'),
              ('display_name', 'Aerosol Band Ratio'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input')]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'AER_BAND_WAVL'),
              ('description',
               'Specify wavelengths [nanometers] for the band of the custom '
               'single-band aerosol retrieval. The user may define a single '
               'wavelength or a wavelength interval.'),
              ('display_name', 'Aerosol Band Wavelength'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('dimensions', '[*]'),
              ('direction', 'input')]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'AER_REFERENCE_VALUE'),
              ('description',
               'Specify the expected reflectance value of a pixel to use in '
               'the single band aerosol retrieval. This is primarily useful '
               'when a known target material is present.'),
              ('display_name', 'Aerosol Reference Value'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input'),
              ('default_value', 0.0)]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_EXACT', False),
              ('TEST_OVERFLOW', True),
              ('name', 'AER_REFERENCE_PIXEL'),
              ('description',
               'Specify the location of a pixel (column, line) to use in the '
               'single band aerosol retrieval. If undefined, the darkest '
               'in-band pixel will be used as a reference.'),
              ('display_name', 'Aerosol Reference Pixel'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'INT'),
              ('dimensions', '[*]'),
              ('direction', 'input')]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'AER_BANDLOW_WAVL'),
              ('description',
               'Specify wavelengths [nanometers] for the lower band of the '
               'custom 2-band aerosol retrieval. The user may define a single '
               'wavelength or a wavelenght interval.'),
              ('display_name', 'Aerosol Bandlow Wavelength'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('dimensions', '[*]'),
              ('direction', 'input')]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'AER_BANDLOW_MAXREFL'),
              ('description',
               'Specify maximum reflectance threshold for the lower band of '
               'the custom 2-band aerosol retrieval. Pixels brighter than this '
               'value will be excluded from the aerosol retrieval process.'),
              ('display_name', 'Aerosol Bandlow Max. Reflectance'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input')]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'AER_BANDHIGH_WAVL'),
              ('description',
               'Specify wavelengths [nanometers] for the upper band of the '
               'custom 2-band aerosol retrieval. The user may define a single '
               'wavelength or a wavelength interval.'),
              ('display_name', 'Aerosol Bandhigh Wavelength'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('dimensions', '[*]'),
              ('direction', 'input')]),
 OrderedDict([('INCLUSIVE_MAX', True),
              ('INCLUSIVE_MIN', True),
              ('TEST_OVERFLOW', True),
              ('name', 'AER_BANDHIGH_MAXREFL'),
              ('description',
               'Specify a maximum reflectance threshold for the upper band of '
               'the custom 2-band aerosol retrieval. Pixels brighter than this '
               'value will be excluded from the aerosol retrieval process.'),
              ('display_name', 'Aerosol Bandhigh Max. Reflectance'),
              ('required', False),
              ('min', None),
              ('max', None),
              ('type', 'FLOAT'),
              ('direction', 'input')]),
 OrderedDict([('name', 'CLOUD_RASTER_URI'),
              ('description',
               'Specify a string with the fully qualified filename and path of '
               'the associated CLOUD_RASTER. If you do not set this parameter '
               'to a valid filename, a cloud raster will not be generated.'),
              ('display_name', 'Output Cloud Raster URI'),
              ('required', False),
              ('type', 'ENVIURI'),
              ('direction', 'input'),
              ('fold_case', True),
              ('auto_extension', '.dat'),
              ('is_temporary', True),
              ('is_directory', False)]),
 OrderedDict([('name', 'WATER_RASTER_URI'),
              ('description',
               'Specify a string with the fully qualified filename and path of '
               'the associated WATER_RASTER. If you do not set this parameter '
               'to a valid filename, a water vapor raster will not be '
               'generated.'),
              ('display_name', 'Output Water Vapor Raster URI'),
              ('required', False),
              ('type', 'ENVIURI'),
              ('direction', 'input'),
              ('fold_case', True),
              ('auto_extension', '.dat'),
              ('is_temporary', True),
              ('is_directory', False)]),
 OrderedDict([('name', 'OUTPUT_RASTER_URI'),
              ('description',
               'Specify a string with the fully qualified filename and path of '
               'the associated OUTPUT_RASTER. If you do not specify this '
               'property, or set it to an exclamation symbol (!), a temporary '
               'file will be created.'),
              ('display_name', 'Output Raster URI'),
              ('required', False),
              ('type', 'ENVIURI'),
              ('direction', 'input'),
              ('fold_case', True),
              ('auto_extension', '.dat'),
              ('is_temporary', True),
              ('is_directory', False)]),
 OrderedDict([('ALLOW_NULL', False),
              ('URI_PARAM', 'CLOUD_RASTER_URI'),
              ('name', 'CLOUD_RASTER'),
              ('description',
               'This is a reference to the cloud output raster of filetype '
               'ENVI.'),
              ('display_name', 'Output Cloud Raster'),
              ('required', False),
              ('type', 'ENVIRASTER'),
              ('direction', 'output')]),
 OrderedDict([('ALLOW_NULL', False),
              ('URI_PARAM', 'WATER_RASTER_URI'),
              ('name', 'WATER_RASTER'),
              ('description',
               'This is a reference to the water vapor output raster of '
               'filetype ENVI.'),
              ('display_name', 'Output Water Raster'),
              ('required', False),
              ('type', 'ENVIRASTER'),
              ('direction', 'output')]),
 OrderedDict([('ALLOW_NULL', False),
              ('URI_PARAM', 'OUTPUT_RASTER_URI'),
              ('name', 'OUTPUT_RASTER'),
              ('description',
               'This is a reference to the FLAASH output raster of filetype '
               'ENVI.'),
              ('display_name', 'Output Raster'),
              ('required', True),
              ('type', 'ENVIRASTER'),
              ('direction', 'output')])]
